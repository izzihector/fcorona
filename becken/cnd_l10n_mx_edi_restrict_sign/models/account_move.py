# -*- coding: utf-8 -*-
from odoo import models, fields, api, _
from odoo.exceptions import UserError
import base64
from io import BytesIO
from odoo.tools.xml_utils import _check_with_xsd
from lxml import objectify


class AccountMove(models.Model):
    _inherit = 'account.move'

    @api.depends('partner_id')
    def _compute_sign_required(self):
        """Assign the "Sign CFDI?" value how in the partner"""
        out_invoice = self.filtered(lambda i: i.move_type == 'out_invoice')
        for record in out_invoice:
            record.l10n_mx_edi_sign_required = record.partner_id.commercial_partner_id.l10n_mx_edi_sign_required
            record.l10n_mx_edi_payment_sign_required = record.partner_id.commercial_partner_id.l10n_mx_edi_sign_required

        for record in self - out_invoice:
            record.l10n_mx_edi_sign_required = True
            record.l10n_mx_edi_payment_sign_required = True

    def _inverse_sign_required(self):
        return False

    l10n_mx_edi_sign_required = fields.Boolean(
        string='Sign CFDI?',
        compute='_compute_sign_required',
        default=True,
        store=True,
        copy=True,
        inverse='_inverse_sign_required',
        states={'draft': [('readonly', False)]},
        help='If this field is active, the CFDI will be generated for this invoice.')

    l10n_mx_edi_payment_sign_required = fields.Boolean(
        string='Sign CFDI Payment?',
        compute='_compute_sign_required',
        default=True,
        store=True,
        copy=True,
        inverse='_inverse_sign_required',
        states={'draft': [('readonly', False)]},
        help='If this field is active, the CFDI payment will be generated for this invoice payments.')

    l10n_mx_edi_external_reference = fields.Char(
        string='External Reference',
        help='External Invoice Reference comes normally in the PDF, it was generated by the External Partner who '
        'signed the invoice.', copy=False)

    l10n_mx_edi_xml_file_require = fields.Boolean(
        string='Is xml file required?',
        store=True,
        related='company_id.l10n_mx_edi_xml_file_require',
        help='Check if the xml file is going to be required or not, in not '
        'signed invoices.')

    # Método para colocar el campo UUID a facturas desde un xml adjunto
    def link_xml_attachment_file(self):
        for move in self:
            # Si existe account.edi.document con edi_format_name = 'CFDI (3.3)' relacionado
            cfdi_3_3_edi = move.env.ref('l10n_mx_edi.edi_cfdi_3_3')
            edi_document_id = move.edi_document_ids.filtered(lambda document: document.edi_format_id == cfdi_3_3_edi)
            attachment_id = move.is_xml_valid()
            vals = {
                'edi_format_id': cfdi_3_3_edi.id,
                'attachment_id': attachment_id.id,
                'state': 'sent',
            }
            if edi_document_id:
                edi_document_id.write(vals)
            else:
                # Nota: Creo que me falta crear otro valor
                # move.env['account.edi.format'].create(vals)
                move.write({'edi_document_ids': [(0, 0, vals)], 'l10n_mx_edi_sign_required': True})

    def is_xml_valid(self):
        self.ensure_one()
        domain = [
            ('res_id', '=', self.id),
            ('res_model', '=', self._name),
            ('name', '=like', '%.xml')]
        # Buscar el último xml adjunto
        attachment_id = self.env['ir.attachment'].search(domain, limit=1)
        if not attachment_id:
            raise UserError(
                _("Please, before post this invoice, attach the xml signed file to invoice id: %s" % self.id))
        else:
            # Validar que el xml corresponde a la factura y es un xml válido
            xsd_attachment = self.sudo().env.ref('l10n_mx_edi.xsd_cached_cfdv33_xsd', False)
            xsd_datas = base64.b64decode(xsd_attachment.datas) if xsd_attachment else None

            cfdi_data = base64.decodebytes(attachment_id.with_context(bin_size=False).datas).replace(
                b'xmlns:schemaLocation', b'xsi:schemaLocation')
            try:
                # tree = self.get_xml_tree_from_string(cfdi_data)
                tree = objectify.fromstring(cfdi_data)
            except Exception as e:
                raise UserError(_("The xml file: \"%s\" is not a valid CFDI file.") % (attachment_id.name))

            if xsd_datas:
                try:
                    with BytesIO(xsd_datas) as xsd:
                        _check_with_xsd(tree, xsd)
                except (IOError, ValueError):
                    raise UserError(_("The xsd file to validate the XML structure was not found"))
                except Exception as e:
                    raise UserError(_('The CFDI generated is not valid.\n') + str(e))
            else:
                raise UserError(_("The xsd file to validate the XML structure was not found"))

            # Validar el RFC del Emisor
            company_vat = self.env.user.company_id.vat
            rfc_supplier = tree.Emisor.get('Rfc', tree.Emisor.get('Rfc'))
            if rfc_supplier != company_vat:
                raise UserError(_('Sender VAT of the XML file does not coincide with the VAT of your company!'))

            # Validar el RFC del Receptor
            rfc_customer = tree.Receptor.get('Rfc', tree.Receptor.get('Rfc'))
            customer_vat = self.partner_id.vat
            if rfc_customer != customer_vat:
                raise UserError(
                    _('Receiver VAT of the XML file does not coincide with the VAT of this customer!'))

            # Validar la Moneda
            xml_moneda = tree.get('Moneda', tree.get('Moneda')) or ''
            invoice_currency = self.currency_id.name
            if xml_moneda != invoice_currency:
                raise UserError(
                    _('The currency of the XML file does not coincide with the curency of this Invoice!'))

            # Validar el monto Total
            xml_total = tree.get('Total', tree.get('Total')) or ''
            invoice_total = self.amount_total
            # TODO: Mostrar Warning pero no Error
            if float(xml_total) != invoice_total:
                raise UserError(
                    _('The total amount of the XML file does not coincide with the invoice total amount!'))
            return attachment_id
        return False

    def _post(self, soft=True):
        for move in self:
            # Si requiere xml las factura que no se timbran, validar que exista el xml como adjunto
            if move.l10n_mx_edi_xml_file_require and move.move_type in ('out_invoice', 'out_refund') and \
               move.l10n_mx_edi_sign_required is False:
                move.is_xml_valid()
                move.name = move.l10n_mx_edi_external_reference

        to_post = super()._post(soft=soft)

        for move in self:
            if move.l10n_mx_edi_xml_file_require and move.move_type in ('out_invoice', 'out_refund') and \
               move.l10n_mx_edi_sign_required is False:
                move.link_xml_attachment_file()

        return to_post
